substr(Colname_correct, nchar(Colname_correct) - 1, nchar(Colname_correct))),
ifelse(Type == 2,
substr(Colname_correct, nchar(Colname_correct) - 2, nchar(Colname_correct)))),
Colname_wide = paste(Colname_unique, Type, Period, sep = "_"))
vars_BL %>% mutate(Type = ifelse(Colname_correct %in% vars0,
0,
ifelse(Colname_correct %in% vars1,
1, ifelse(Colname_correct %in% vars2, 2)))) %>%
mutate(Colname_unique = ifelse(Type == 0,
Colname_correct,
ifelse(Type == 1,
substr(Colname_correct, 1, nchar(Colname_correct) - 1)),
ifelse(Type == 2,
substr(Colname_correct, 1, nchar(Colname_correct) - 2))),
Period = ifelse(Type == 0,
"",
ifelse(Type == 1,
substr(Colname_correct, nchar(Colname_correct) - 1, nchar(Colname_correct))),
ifelse(Type == 2,
substr(Colname_correct, nchar(Colname_correct) - 2, nchar(Colname_correct)))))
vars_BL %>% mutate(Type = ifelse(Colname_correct %in% vars0,
0,
ifelse(Colname_correct %in% vars1,
1,
ifelse(Colname_correct %in% vars2,
2,
NA)))) %>%
mutate(Colname_unique = ifelse(Type == 0,
Colname_correct,
ifelse(Type == 1,
substr(Colname_correct, 1, nchar(Colname_correct) - 1),
ifelse(Type == 2,
substr(Colname_correct, 1, nchar(Colname_correct) - 2)))),
Period = ifelse(Type == 0,
"",
ifelse(Type == 1,
substr(Colname_correct, nchar(Colname_correct) - 1, nchar(Colname_correct)),
ifelse(Type == 2,
substr(Colname_correct, nchar(Colname_correct) - 2, nchar(Colname_correct)),
NA))),
Colname_wide = paste(Colname_unique, Type, Period, sep = "_"))
vars_BL %>% mutate(Type = ifelse(Colname_correct %in% vars0,
0,
ifelse(Colname_correct %in% vars1,
1,
ifelse(Colname_correct %in% vars2,
2,
NA)))) %>%
mutate(Colname_unique = ifelse(Type == 0,
Colname_correct,
ifelse(Type == 1,
substr(Colname_correct, 1, nchar(Colname_correct) - 1),
ifelse(Type == 2,
substr(Colname_correct, 1, nchar(Colname_correct) - 2),NA))),
Period = ifelse(Type == 0,
"",
ifelse(Type == 1,
substr(Colname_correct, nchar(Colname_correct) - 1, nchar(Colname_correct)),
ifelse(Type == 2,
substr(Colname_correct, nchar(Colname_correct) - 2, nchar(Colname_correct)),
NA))),
Colname_wide = paste(Colname_unique, Type, Period, sep = "_"))
vars_BL %>% mutate(Type = ifelse(Colname_correct %in% vars0,
0,
ifelse(Colname_correct %in% vars1,
1,
ifelse(Colname_correct %in% vars2,
2,
NA)))) %>%
mutate(Colname_unique = ifelse(Type == 0,
Colname_correct,
ifelse(Type == 1,
substr(Colname_correct, 1, nchar(Colname_correct) - 1),
ifelse(Type == 2,
substr(Colname_correct, 1, nchar(Colname_correct) - 2),NA))),
Period = ifelse(Type == 0,
"",
ifelse(Type == 1,
substring(Colname_correct, nchar(Colname_correct)),
ifelse(Type == 2,
substring(Colname_correct, nchar(Colname_correct) - 1),
NA))),
Colname_wide = paste(Colname_unique, Type, Period, sep = "_"))
read.set.names.BL <- function(x){
read.table(paste0("data/barrolee/",x$File[1])) %>%
purrr::set_names(x$Colname)
}
BL <- vars_BL %>%
split(.$File) %>%
map_dfc(read.set.names.BL) %>%
set_rownames(countries$WBCTRY) #%>%
# t()
colnames(BL)
read.set.names.BL <- function(x){
read.table(paste0("data/barrolee/",x$File[1])) %>%
purrr::set_names(x$Colname_wide)
}
BL <- vars_BL %>%
split(.$File) %>%
map_dfc(read.set.names.BL) %>%
set_rownames(countries$WBCTRY) #%>%
# t()
colnames(BL)
read.set.names.BL <- function(x){
read.table(paste0("data/barrolee/",x$File[1])) %>%
purrr::set_names(x$Colname_wide)
}
BL <- vars_BL %>%
split(.$File) %>%
map_dfc(read.set.names.BL) %>%
set_rownames(countries$WBCTRY) #%>%
# t()
colnames(BL)
vars_BL
vars_BL <- vars_BL %>% mutate(Type = ifelse(Colname_correct %in% vars0,
0,
ifelse(Colname_correct %in% vars1,
1,
ifelse(Colname_correct %in% vars2,
2,
NA)))) %>%
mutate(Colname_unique = ifelse(Type == 0,
Colname_correct,
ifelse(Type == 1,
substr(Colname_correct, 1, nchar(Colname_correct) - 1),
ifelse(Type == 2,
substr(Colname_correct, 1, nchar(Colname_correct) - 2),NA))),
Period = ifelse(Type == 0,
"",
ifelse(Type == 1,
substring(Colname_correct, nchar(Colname_correct)),
ifelse(Type == 2,
substring(Colname_correct, nchar(Colname_correct) - 1),
NA))),
Colname_wide = paste(Colname_unique, Type, Period, sep = "_"))
read.set.names.BL <- function(x){
read.table(paste0("data/barrolee/",x$File[1])) %>%
purrr::set_names(x$Colname_wide)
}
BL <- vars_BL %>%
split(.$File) %>%
map_dfc(read.set.names.BL) %>%
set_rownames(countries$WBCTRY) #%>%
# t()
colnames(BL)
vars_BL %>% filter(Type = 0 | (Type = 1&Period = 1)|(Type = 2& Period = 65))
vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65))
vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65)) %>% pull(Colname_wide)
BL[vars_65]
BL[[vars_65]]
vars_65 <- vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65)) %>% pull(Colname_wide)
BL[[vars_65]]
BL[vars_65]
vars_65 %>% View
BL %>% select(matches(vars65), - gdpsh4_2_65)
BL %>% select(matches(vars_65), - gdpsh4_2_65)
BL %>% select(vars_65, - gdpsh4_2_65)
BL %>% select(vars_65, - gdpsh4_2_65) %>% dim
BL %>% select(vars_65) %>% dim
X <- BL %>% select(vars_65, - gdpsh4_2_65) %>% dim
Y <- BL %>% pull(gdpsh4_2_65)
Y
X <- BL %>% select(vars_65) %>% na.omit %>% select(-gdpsh4_2_65) %>% dim
X
X <- BL %>% select(vars_65) %>% na.omit %>% select(-gdpsh4_2_65)
X
X <- BL %>% select(vars_65) %>%
X <- BL %>% select(vars_65)
X
X %>% View
X[is.na(X)]
is.na(X)
colSums(is.na(X))
colSums(is.na(X)) %>% View
vars_65 <- vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65)) %>% pull(Colname_wide)
X <- BL %>% select(vars_65) #%>% na.omit %>% select(-gdpsh4_2_65)
Y <- BL %>% pull(gdpsh4_2_65)
X <- X[!is.na(Y)]
vars_65 <- vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65)) %>% pull(Colname_wide)
X <- BL %>% select(vars_65) #%>% na.omit %>% select(-gdpsh4_2_65)
Y <- BL %>% pull(gdpsh4_2_65)
X <- X[!is.na(Y),]
Y <- Y[!is.na(Y)]
for(i in 1:ncol(X)){
X[,i][is.na(X[,i])] <- mean(X[,i], na.rm = TRUE)
}
X <- as.matrix(X)
glmnet(X)
glmnet(X,y)
glmnet(X,Y)
model1 <- glmnet(X,Y)
summary(model1)
model1$beta
model1$a0
model1$dim
model1$lambda
print(model1)
coef(model1, s = 0.01)
vars_65 <- vars_BL %>% filter(Type == 0 | (Type == 1&Period == 1) | (Type == 2 & Period == 65)) %>% pull(Colname_wide)
X <- BL %>% select(vars_65,-gdpsh4_2_65)
Y <- BL %>% pull(gdpsh4_2_65)
X <- X[!is.na(Y),]
Y <- Y[!is.na(Y)]
for(i in 1:ncol(X)){
X[,i][is.na(X[,i])] <- mean(X[,i], na.rm = TRUE)
}
X <- as.matrix(X)
model1 <- glmnet(X,Y)
summary(model1)
coef(model1, s = 0.01)
coef(model1, s = 0.001)
coef(model1, s = 0.1)
coef(model1, s = 1)
model1 <- glmnet(X,Y, family = "Cox")
model1 <- glmnet(X,Y, family = "cox")
model1 <- glmnet(X,Y, family = "multinomial")
model1 <- glmnet(X,Y, family = "gaussian")
model1
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
install.packages(c("rio", "latex2exp", "stringr"))
install.packages("rio")
install.packages("data.table")
install.packages(c("stringr", "magrittr", "purrr", "ggplot2", "latex2exp", "stargazer", "glmnet", "corrplot"))
load("C:/Users/Mikhail Gareev/Downloads/volatility.RData")
price
spx
price %>% pull(Ticker) %>% inique
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
price %>% pull(Ticker) %>% inique
price %>% pull(Ticker) %>% unique
price %>% filter(Ticker = "GE")
price %>% filter(Ticker == "GE")
x2 <- spx  %>% select(date, px_last)
ggplot(x1) +
geom_line
x1 <- price %>% filter(Ticker == "GE") %>% select(date, px_last)
ggplot(x1) +
geom_line
ggplot(x1) +
geom_line()
ggplot(x1) +
geom_line(aes(x = date, y = px_last))
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/2000), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/200), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/100), colour = "darkblue")
cor(x1$px_last, x2$px_last)
cor(x1$px_last, x2$px_last, use = "complete.obs")
library(ggplot2)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(gridExtra)
library(hexbin)
install.packages(c("tidyr", "forecast", "gridExtra", "Amelia", "fastDummies", "gnm", "parallel", "xgboost", "e1071", "caret", "DiagrammeR", "DiagrammeRsvg", "rsvg", "neuralnet", "forecastxgb", "xts", "DtD", "readr", "TTR", "zoo", "seqHMM", "hexbin"))
source('~/GitHub/hds_macro/code/lib.R')
install.packages("rio")
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
source('~/GitHub/hds_macro/code/lib.R')
install.packages("latex2exp")
source('~/GitHub/hds_macro/code/lib.R')
install.packages(c("stargazer", "corrplot", "dplyr"))
source('~/GitHub/hds_macro/code/lib.R')
install.packages("dplyr")
source('~/GitHub/hds_macro/code/lib.R')
install.packages("glmnet")
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
library(dplyr)
library(XLConnect)
library(lubridate)
library(rio)
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
library(dplyr)
library(XLConnect)
library(lubridate)
install.packages("XLConnect")
library(lubridate)
library(rio)
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
install.packages("forecastxgb")
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(hexbin)
install.packages("digest")
install.packages("IRkernel")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages("C:/Users/Mikhail Gareev/Downloads/devtools_2.0.0.tar.gz", repos = NULL, type = "source")
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
source('~/GitHub/hds_macro/code/lib.R', echo=TRUE)
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
result <- expand.grid(initialWindow = seq(12,24,2), horizon = c(3,6,12)) %>%
split(seq(nrow(.))) %>% map_dfr(function(df){
tibble(IW = df$initialWindow, H = df$horizon,
E = method.check(initialWindow = df$initialWindow,
horizon = df$horizon))
}
)
Y <- sophisthse("UNEMPL_M_SH", output = "ts")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(hexbin)
library(sophisthse)
library(tseries)
library(forecast)
library(caret)
library(lubridate)
library(rio)
library(stringr)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
Y <- sophisthse("UNEMPL_M_SH", output = "ts")
# 1. Базовый бенчмарк - arima
# Байесовская модель
# Инструментальные переменные
# LASSO POST LASSO
# проверять все на кросс валидации с плавающим окном
# caret::createTimeSlices() чтобы сделать для cv
method.check <- function(y = Y,x=NULL,  method=NULL, initialWindow, horizon){
TS <- createTimeSlices(y,
initialWindow = initialWindow,
horizon = horizon,
fixedWindow = TRUE)
error <- c()
for(i in 1:length(TS$train)){
y_train <- y[TS$train[[i]]]
y_test <- y[TS$test[[i]]]
model <- auto.arima(y_train)
error <- c(error, sum(((forecast(model, horizon) %>% as_tibble %>% .[,1]) - y_test)^2)/ sum(y_test^2))
}
error
}
result <- expand.grid(initialWindow = seq(12,24,2), horizon = c(3,6,12)) %>%
split(seq(nrow(.))) %>% map_dfr(function(df){
tibble(IW = df$initialWindow, H = df$horizon,
E = method.check(initialWindow = df$initialWindow,
horizon = df$horizon))
}
)
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
