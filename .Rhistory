library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
install.packages(c("rio", "latex2exp", "stringr"))
install.packages("rio")
install.packages("data.table")
install.packages(c("stringr", "magrittr", "purrr", "ggplot2", "latex2exp", "stargazer", "glmnet", "corrplot"))
load("C:/Users/Mikhail Gareev/Downloads/volatility.RData")
price
spx
price %>% pull(Ticker) %>% inique
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
price %>% pull(Ticker) %>% inique
price %>% pull(Ticker) %>% unique
price %>% filter(Ticker = "GE")
price %>% filter(Ticker == "GE")
x2 <- spx  %>% select(date, px_last)
ggplot(x1) +
geom_line
x1 <- price %>% filter(Ticker == "GE") %>% select(date, px_last)
ggplot(x1) +
geom_line
ggplot(x1) +
geom_line()
ggplot(x1) +
geom_line(aes(x = date, y = px_last))
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/2000), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/200), colour = "darkblue")
ggplot(x1) +
geom_line(aes(x = date, y = px_last), colour = "darkred") +
geom_line(aes(x = date, y = x2$px_last/100), colour = "darkblue")
cor(x1$px_last, x2$px_last)
cor(x1$px_last, x2$px_last, use = "complete.obs")
library(ggplot2)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(gridExtra)
library(hexbin)
install.packages(c("tidyr", "forecast", "gridExtra", "Amelia", "fastDummies", "gnm", "parallel", "xgboost", "e1071", "caret", "DiagrammeR", "DiagrammeRsvg", "rsvg", "neuralnet", "forecastxgb", "xts", "DtD", "readr", "TTR", "zoo", "seqHMM", "hexbin"))
source('~/GitHub/hds_macro/code/lib.R')
install.packages("rio")
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
source('~/GitHub/hds_macro/code/lib.R')
install.packages("latex2exp")
source('~/GitHub/hds_macro/code/lib.R')
install.packages(c("stargazer", "corrplot", "dplyr"))
source('~/GitHub/hds_macro/code/lib.R')
install.packages("dplyr")
source('~/GitHub/hds_macro/code/lib.R')
install.packages("glmnet")
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
library(dplyr)
library(XLConnect)
library(lubridate)
library(rio)
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(wbstats)
library(dplyr)
library(data.table)
library(rio)
library(stringr)
library(magrittr)
library(purrr)
library(ggplot2)
library(latex2exp)
library(stargazer)
library(glmnet)
library(corrplot)
library(dplyr)
library(XLConnect)
library(lubridate)
install.packages("XLConnect")
library(lubridate)
library(rio)
library(stringr)
library(Rblpapi)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
install.packages("forecastxgb")
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(hexbin)
install.packages("digest")
install.packages("IRkernel")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages("C:/Users/Mikhail Gareev/Downloads/devtools_2.0.0.tar.gz", repos = NULL, type = "source")
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
source('~/GitHub/hds_macro/code/lib.R', echo=TRUE)
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
result <- expand.grid(initialWindow = seq(12,24,2), horizon = c(3,6,12)) %>%
split(seq(nrow(.))) %>% map_dfr(function(df){
tibble(IW = df$initialWindow, H = df$horizon,
E = method.check(initialWindow = df$initialWindow,
horizon = df$horizon))
}
)
Y <- sophisthse("UNEMPL_M_SH", output = "ts")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(neuralnet)
library(forecastxgb)
library(xts)
library(DtD)
library(readr)
library(TTR)
library(zoo)
library(seqHMM)
library(hexbin)
library(sophisthse)
library(tseries)
library(forecast)
library(caret)
library(lubridate)
library(rio)
library(stringr)
library(tibble)
library(magrittr)
library(purrr)
library(data.table)
library(tidyr)
library(forecast)
library(gridExtra)
library(Amelia)
library(fastDummies)
library(gnm)
library(parallel)
library(xgboost)
library(e1071)
library(caret)
Y <- sophisthse("UNEMPL_M_SH", output = "ts")
# 1. Базовый бенчмарк - arima
# Байесовская модель
# Инструментальные переменные
# LASSO POST LASSO
# проверять все на кросс валидации с плавающим окном
# caret::createTimeSlices() чтобы сделать для cv
method.check <- function(y = Y,x=NULL,  method=NULL, initialWindow, horizon){
TS <- createTimeSlices(y,
initialWindow = initialWindow,
horizon = horizon,
fixedWindow = TRUE)
error <- c()
for(i in 1:length(TS$train)){
y_train <- y[TS$train[[i]]]
y_test <- y[TS$test[[i]]]
model <- auto.arima(y_train)
error <- c(error, sum(((forecast(model, horizon) %>% as_tibble %>% .[,1]) - y_test)^2)/ sum(y_test^2))
}
error
}
result <- expand.grid(initialWindow = seq(12,24,2), horizon = c(3,6,12)) %>%
split(seq(nrow(.))) %>% map_dfr(function(df){
tibble(IW = df$initialWindow, H = df$horizon,
E = method.check(initialWindow = df$initialWindow,
horizon = df$horizon))
}
)
result %>%
ggplot(aes(x = IW, y = E, group = E, colour = factor(H)))+
# stat_summary(
#  fun.ymin = function(z) { quantile(z,0.25) },
#  fun.ymax = function(z) { quantile(z,0.9) },
#  fun.y = median, position = position_dodge(width = 0.5))+
geom_violin(position = position_dodge(width = 0.5))+
labs(x = "Initial Window", y = "Error") +
guides(colour=guide_legend(title="Horizon"))+
ylim(c(0, 0.010))
source("lib.R")
getwd()
# addictive
y_dec <- sophisthse(series.name = "UNEMPL_M_SH", output = "zoo") %>%
#window(start = zoo::as.yearmon("2002-01-01"),
#     end = zoo::as.yearmon("2018-12-01")) %>%
decompose()
source("lib.R")
install.packages("sophisthse")
source("lib.R")
# addictive
y_dec <- sophisthse(series.name = "UNEMPL_M_SH", output = "zoo") %>%
#window(start = zoo::as.yearmon("2002-01-01"),
#     end = zoo::as.yearmon("2018-12-01")) %>%
decompose()
Y_DEC
y_dec
y <- y_dec$x - y_dec$seasonal
autoplot(y)
# adf test выбираем addictive seasoanlity
y <- y - stats::lag(y, -1, na.pad = TRUE)
autoplot(y)
# кажется этого достаточно
acf(y, lag.max = length(y))
pacf(y, lag.max = length(y))
adf.test(y)
# кажется этого достаточно
acf(y, lag.max = length(y))
pacf(y, lag.max = length(y))
kpss.test(y)
# кажется этого достаточно
acf(y, lag.max = length(y))
y_dates <- zoo::as.yearmon(time(y))
rm(list = ls())
y_dec <- sophisthse(series.name = "UNEMPL_M_SH", output = "zoo") %>%
#window(start = zoo::as.yearmon("2002-01-01"),
#     end = zoo::as.yearmon("2018-12-01")) %>%
decompose()
y <- y_dec$x - y_dec$seasonal
autoplot(y)
# adf test выбираем addictive seasoanlity
y <- y - stats::lag(y, -1, na.pad = TRUE)
autoplot(y)
# кажется этого достаточно
acf(y, lag.max = length(y))
pacf(y, lag.max = length(y))
adf.test(y)
kpss.test(y)
y <- y_dec$x - y_dec$seasonal
# adf test выбираем addictive seasoanlity
y <- log(y) - log(stats::lag(y, -1, na.pad = TRUE))
autoplot(y)
pacf(y, lag.max = length(y))
adf.test(y)
kpss.test(y)
y_dates <- zoo::as.yearmon(time(y))
autoplot(y)
y_dec <- sophisthse(series.name = "UNEMPL_M_SH", output = "zoo") %>%
#window(start = zoo::as.yearmon("2002-01-01"),
#     end = zoo::as.yearmon("2018-12-01")) %>%
decompose()
y <- y_dec$x - y_dec$seasonal
autoplot(y)
# adf test выбираем addictive seasoanlity
y <- log(y) - log(stats::lag(y, -1, na.pad = TRUE))
autoplot(y)
# кажется этого достаточно
acf(y, lag.max = length(y))
pacf(y, lag.max = length(y))
adf.test(y)
autoplot(y)
save(y, y_dates, file = "rawdata_ar.RData")
load("rawdata_ar.RData")
# AR -----
rm(list = ls())
load("rawdata_ar.RData")
y_dates
# Panel data import ----
df_raw <- sophisthse(series.name = series$table %>% unique, output = "data.frame")
series <- series_info %>%
filter(freq == 12)
df_raw <- sophisthse(series.name = series$table %>% unique, output = "data.frame")
df <- df_raw %>%
filter(!is.na(UNEMPL_M_SH),
`T` >= zoo::as.yearmon("2002-01-01"),
`T` <= zoo::as.yearmon("2016-12-01"))
df
missmap(df2)
# пропущенные значения
missmap(df)
df <- df_raw %>%
filter(!is.na(UNEMPL_M_SH),
`T` >= zoo::as.yearmon("2001-12-01"),
`T` <= zoo::as.yearmon("2016-12-01"))
# пропущенные значения
missmap(df)
df <- df_raw %>%
filter(!is.na(UNEMPL_M_SH),
`T` >= zoo::as.yearmon("2002-01-01"),
`T` <= zoo::as.yearmon("2016-12-01"))
nonmis <- sapply(df, function(y) sum(length(which(is.na(y))))) %>%
data.frame %>%
rownames_to_column("tname") %>%
filter(`.` == 0) %>%
pull(tname)
df %<>% select(nonmis)
# пропущенные значения
missmap(df)
save(df, file = "rawdata_panel.RData")
# корреляции
cormat <- cor(df[,-1])
cormat
names(cormat)
colnames(cormat)
install.packages("rlist")
rlist::list.append(corpairs, 3)
# корреляции
corpairs <- list(a = 4)
rlist::list.append(corpairs, 3)
# корреляции
corpairs <- list(4)
rlist::list.append(corpairs, 3)
# корреляции
corpairs <- list()
for(i in 1:nrow(cormat)){
for(j in j:ncol(cormat)){
if(cormat[i,j]>=0.99)
corpairs <- rlist::list.append(corpairs, 3)
}
}
for(i in 1:nrow(cormat)){
for(j in i:ncol(cormat)){
if(cormat[i,j]>=0.99)
corpairs <- rlist::list.append(corpairs, 3)
}
}
corpairs
# корреляции
corpairs <- list()
cormat <- cor(df[,-1])
for(i in 1:nrow(cormat)){
for(j in i:ncol(cormat)){
if(cormat[i,j]>=0.99)
corpairs <- rlist::list.append(corpairs, c(colnames(cormat[i]), colnames(cormat[j])))
}
}
corpairs
# корреляции
corpairs <- list()
cormat <- cor(df[,-1])
for(i in 1:nrow(cormat)){
for(j in i:ncol(cormat)){
if(cormat[i,j]>=0.99)
print(c(colnames(cormat[i]), colnames(cormat[j])))
corpairs <- rlist::list.append(corpairs, c(colnames(cormat[i]), colnames(cormat[j])))
}
}
colnames(cormat)
# корреляции
corpairs <- list()
cormat <- cor(df[,-1])
for(i in 1:nrow(cormat)){
for(j in i:ncol(cormat)){
if(cormat[i,j]>=0.99)
corpairs <- rlist::list.append(corpairs, c(colnames(cormat)[i], colnames(cormat)[j]))
}
}
corpairs
corpairs %>% bind_rows
corpairs %>% rbinm
corpairs %>% rbind
# корреляции
corpairs <- list()
cormat <- cor(df[,-1])
for(i in 1:nrow(cormat)){
for(j in i:ncol(cormat)){
if(cormat[i,j]>=0.99)
corpairs <- rlist::list.append(corpairs, data.frame(cn1 = colnames(cormat)[i],cn2= colnames(cormat)[j]))
}
}
corpairs %>% rbind
corpairs %>% bind_rows
corpairs %>% bind_rows %>% arrange(cn1)
corpairs %>% bind_rows %>% arrange(cn1) %>% inner_join(series_info %>% select(tsname), by = c("cn1" == "tsname"))
corpairs %>% bind_rows %>% arrange(cn1) %>% inner_join(series_info %>% select(tsname), by = c("cn1" = "tsname"))
corpairs %>% bind_rows %>% arrange(cn1) %>% inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname"))
corpairs %>% bind_rows %>% arrange(cn1) %>% inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% View
corpairs %>%
bind_rows %>%
arrange(cn1) %>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% setnames("fullname", "n1")%>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn2" = "tsname")) %>% setnames("fullname", "n2") %>%
selecT(n1, n2)
corpairs %>%
bind_rows %>%
arrange(cn1) %>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% setnames("fullname", "n1")%>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn2" = "tsname")) %>% setnames("fullname", "n2") %>%
select(n1, n2) %>% View
corpairs %>%
bind_rows %>%
arrange(cn1) %>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% setnames("fullname", "n1")%>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn2" = "tsname")) %>% setnames("fullname", "n2") %>%
select(n1, n2) %>% edit
corpairs %>%
bind_rows %>%
arrange(cn1) %>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% setnames("fullname", "n1")%>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn2" = "tsname")) %>% setnames("fullname", "n2") %>%
select(n1, n2) %>% View
corpairs %>%
bind_rows %>%
arrange(cn1) %>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn1" = "tsname")) %>% setnames("fullname", "n1")%>%
inner_join(series_info %>% select(tsname, fullname), by = c("cn2" = "tsname")) %>% setnames("fullname", "n2") %>%
View
grep("_SA", "sa")
grep("_SA", "rd_SA")
grep("_SA", "rd_SA", value = TRUE)
grepl("_SA", "rd_SA")
