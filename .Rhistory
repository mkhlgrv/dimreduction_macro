x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(x, differences = 2)
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
statdf <- result %>% map_dfc(function(x){
x$statdf
})
typedf <- result %>% map_dfr(function(x){
x$typedf
})
list(df = statdf, type = typedf)
}
get.stationary.panel(df)
get.stationary.panel <- function(df){
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(x, differences = 2)
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
# statdf <- result %>% map_dfc(function(x){
#   x$statdf
# })
# typedf <- result %>% map_dfr(function(x){
#   x$typedf
# })
# list(df = statdf, type = typedf)
}
get.stationary.panel <- function(df){
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(x, differences = 2)
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
# statdf <- result %>% map_dfc(function(x){
#   x$statdf
# })
# typedf <- result %>% map_dfr(function(x){
#   x$typedf
# })
# list(df = statdf, type = typedf)
result
}
get.stationary.panel(df)
get.stationary.panel(df) %>% summary
get.stationary.panel(df) %>% map(function(x){
x$statdf %>% dim
})
df$MPOI2_SA
res <- get.stationary.panel(df)
res$MPOI2_SA
get.stationary.panel <- function(df){
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(diff.xts(x))
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
# statdf <- result %>% map_dfc(function(x){
#   x$statdf
# })
# typedf <- result %>% map_dfr(function(x){
#   x$typedf
# })
# list(df = statdf, type = typedf)
result
}
res <- get.stationary.panel(df)
res$MPOI2_SA
get.stationary.panel <- function(df){
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(diff.xts(x))
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
statdf <- result %>% map_dfc(function(x){
x$statdf
})
typedf <- result %>% map_dfr(function(x){
x$typedf
})
list(df = statdf, type = typedf)
}
res <- get.stationary.panel(df)
res$MPOI2_SA
res
res$df
res$df %>% class
?as.zoo
get.stationary.panel <- function(df){
dates <- time(df)
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(diff.xts(x))
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
statdf <- result %>% map_dfc(function(x){
x$statdf
}) %>% as.zoo(dates)
typedf <- result %>% map_dfr(function(x){
x$typedf
})
list(df = statdf, type = typedf)
}
res <- get.stationary.panel(df)
get.stationary.panel <- function(df){
dates <- time(df)
print(dates)
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(diff.xts(x))
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
statdf <- result %>% map_dfc(function(x){
x$statdf
}) %>% as.zoo(order.by = dates)
typedf <- result %>% map_dfr(function(x){
x$typedf
})
list(df = statdf, type = typedf)
}
res <- get.stationary.panel(df)
res$df %>% class
res$df
res$type
get.stationary.panel <- function(df){
dates <- time(df)
result <- df %>%
as.xts %>%
as.list %>%
imap(function(x,i){
x_dec <- decompose(x)
x <- x_dec$x - x_dec$seasonal
# проводим adf test для
# проводим adf test для простой разности
d0 <- adf.test(x) %>% .$p.value
if(d0<=0.05){
type <-  "d0"
x_stat <- x
} else{
d1 <- adf.test(diff.xts(x) %>% na.omit) %>% .$p.value
if(d1<=0.05){
type <-  "d1"
x_stat <- diff.xts(x)
} else{
log_d1 <- 1
try({
log_d1 <- adf.test(diff.xts(log(x)) %>% na.omit) %>% .$p.value
})
if(log_d1<=0.05){
type <- "log_d1"
x_stat <- diff.xts(log(x))
} else{
d2 <- adf.test(diff.xts(x, differences = 2) %>% na.omit) %>% .$p.value
if(d2<=0.05){
type <- "d2"
x_stat <- diff.xts(diff.xts(x))
} else{
# сообщений нет
message(i)
message(min(c(d0, d1, log_d1, d2)))
x_stat = x
}
}
}
}
list(typedf = data.frame(tsname = i, type = type, stringsAsFactors = FALSE),
statdf = data.frame(x_stat, stringsAsFactors = FALSE) %>% set_names(i))
})
statdf <- result %>% map_dfc(function(x){
x$statdf
}) %>% as.zoo(order.by = dates)
typedf <- result %>% map_dfr(function(x){
x$typedf
})
list(df = statdf, type = typedf)
}
# получаем траснформированные ряды
df_tf <- get.stationary.panel(df)$df
# данные о типе трансформации
df_tf_type <- get.stationary.panel(df)$type
rm(df_raw)
rm(cormat)
rm(res)
rm(i, j, remove_names, tnames, x)
rm(i, j, remove_names, tnames, x)
rm(i, j, remove_names, tnames, X)
rm(y_dates)
rm(series_names)
series
save(df_tf, df_tf_type, file = "tfdata_panel.RData")
rm(corpairs)
# Panel data ----
rm(list=ls())
load("tfdata_panel.RData")
model.matrix(UNEMPL_M_SH~., data = df_tf_type)
df_tf_type
model.matrix(UNEMPL_M_SH~., data = df_tf)
na.omit(df_tf)
## LASSO ----
get.panel.r <- function(df, window, horizon){
if("zoo" %in% class(df)){
stop("df Class must be zoo")
}
df %<>% na.omit
dates <- time(df)
model.matrix(UNEMPL_M_SH~., data = df_tf)
expand.grid(window = window, horizon = horizon) %>%
split(seq(nrow(.))) %>% map_dfr(function(x){
TS <- createTimeSlices(y, initialWindow = x$window,
horizon = x$horizon,
fixedWindow = TRUE,
skip = FALSE)
map2_dfr(TS$train, TS$test, function(tr, te){
y_train <-  y[tr]
y_test <- y[te] %>% last
date_test <- dates[te] %>% last
model <- auto.arima(y_train, max.q = 0, d = 0, allowmean = FALSE)
y_pred <- forecast(model, h = x$horizon) %>% as.data.frame %>% .[,1] %>% last
data.frame(date =date_test,
window = x$window,
horizon = x$horizon,
y_true = y_test,
y_pred= y_pred)
})
}) %>%
mutate(model = "arp")
}
get.panel.r(c(0,4), 1, 1)
## LASSO ----
get.panel.r <- function(df, window, horizon){
if(!"zoo" %in% class(df)){
stop("df Class must be zoo")
}
df %<>% na.omit
dates <- time(df)
model.matrix(UNEMPL_M_SH~., data = df_tf)
expand.grid(window = window, horizon = horizon) %>%
split(seq(nrow(.))) %>% map_dfr(function(x){
TS <- createTimeSlices(y, initialWindow = x$window,
horizon = x$horizon,
fixedWindow = TRUE,
skip = FALSE)
map2_dfr(TS$train, TS$test, function(tr, te){
y_train <-  y[tr]
y_test <- y[te] %>% last
date_test <- dates[te] %>% last
model <- auto.arima(y_train, max.q = 0, d = 0, allowmean = FALSE)
y_pred <- forecast(model, h = x$horizon) %>% as.data.frame %>% .[,1] %>% last
data.frame(date =date_test,
window = x$window,
horizon = x$horizon,
y_true = y_test,
y_pred= y_pred)
})
}) %>%
mutate(model = "arp")
}
get.panel.r(c(0,4), 1, 1)
